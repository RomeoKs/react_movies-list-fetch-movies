{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api.ts","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","imdbId","getMovie","query","fetch","then","res","json","catch","Response","Error","FindMovie","addMovie","useState","setQuery","setMovie","hasError","setHasError","duplicateMovieError","setDuplicateMovieError","isLoading","setIsLoading","setMovies","handleSubmit","event","a","preventDefault","replace","trim","result","movieData","imdbID","Title","Plot","Poster","finally","onSubmit","htmlFor","type","id","placeholder","classNames","value","onChange","target","disabled","onClick","some","m","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.32dc616d.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({\n  movie: {\n    title,\n    description,\n    imgUrl,\n    imdbUrl,\n  },\n}) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {description}\n        <br />\n        <a href={imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import { Movie } from './types/Movie';\nimport { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=c34ee7af&';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n\n// Format s the movie data in a consistent way to make it easier to work with.\nexport const normalizeMovie = (movieData: MovieData): Movie => {\n  return {\n    title: movieData.Title,\n    description: movieData.Plot,\n    imgUrl: movieData.Poster === 'N/A'\n      ? 'https://via.placeholder.com/360x270.png?text=no%20preview'\n      : movieData.Poster,\n    imdbUrl: `https://www.imdb.com/title/${movieData.imdbID}`,\n    imdbId: movieData.imdbID,\n  };\n};\n","import React, { useState } from 'react';\nimport './FindMovie.scss';\nimport classNames from 'classnames';\nimport { Movie } from '../../types/Movie';\nimport { getMovie, normalizeMovie } from '../../api';\nimport { MovieData } from '../../types/MovieData';\nimport { MovieCard } from '../MovieCard';\n\ntype Props = {\n  addMovie: (movie: Movie) => void;\n};\n\nexport const FindMovie: React.FC<Props> = ({ addMovie }) => {\n  const [query, setQuery] = useState('');\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [hasError, setHasError] = useState(false);\n  const [duplicateMovieError, setDuplicateMovieError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const sanitizeQuery = (queryToSanitize: string) => {\n    return queryToSanitize.replace(/[^a-zA-Z0-9 ]/g, '').trim();\n  };\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n    setIsLoading(true);\n    const sanitizedQuery = sanitizeQuery(query);\n\n    // asynchronous API call to search for query\n    getMovie(sanitizedQuery)\n      .then(result => {\n        if ((result as MovieData).imdbID) {\n          setMovie(normalizeMovie(result as MovieData));\n        } else {\n          setHasError(true);\n        }\n      })\n      .finally(() => {\n        setIsLoading(false); // stop loading\n      });\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n    setMovie(null);\n    setHasError(false);\n    setDuplicateMovieError('');\n  };\n\n  const handleAddMovie = () => {\n    if (movie) {\n      const isAlreadyInList = movies.some((m) => m.imdbId === movie.imdbId);\n\n      if (isAlreadyInList) {\n        setDuplicateMovieError('This movie is already in the list!');\n        setMovie(null);\n\n        return;\n      }\n\n      addMovie(movie);\n      setMovies([...movies, movie]);\n      setMovie(null);\n      setQuery('');\n    }\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classNames('input', {\n                'is-danger': hasError,\n              })}\n              value={query}\n              onChange={handleChange}\n            />\n          </div>\n\n          {hasError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              {'Can\\'t find a movie with such a title'}\n            </p>\n          )}\n\n          {duplicateMovieError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              {duplicateMovieError}\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames('button', 'is-light', {\n                'is-loading': isLoading,\n              })}\n              disabled={!query.trim()}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          {movie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={handleAddMovie}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n      {movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const addMovieToList = (movie: Movie) => {\n    setMovies([...movies, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie addMovie={addMovieToList} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}